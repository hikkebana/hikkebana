const express = require('express');
const axios = require('axios');
const app = express();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
app.get('/', (req, res) => {
  res.send('‚úÖ B24 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app.get('/install', async (req, res) => {
  const code = req.query.code;

  if (!code) {
    console.log('‚ùå –ù–µ—Ç –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ query');
    return res.status(400).send('No auth code provided');
  }

  console.log('‚ñ∂ –ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', code);

  try {
    // –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    const tokenRes = await axios.post('https://oauth.bitrix.info/oauth/token', null, {
      params: {
        grant_type: 'authorization_code',
        client_id: 'local.68826ad3562c69.50575076',       // <== —Å—é–¥–∞
        client_secret: 'oFEfKF9BAh5Ae6IeRNE0PGknqJNPSWAtef8JS5qR5WICXLkpm8', // <== –∏ —Å—é–¥–∞
        code
      }
    });

    const { access_token, refresh_token, domain, member_id } = tokenRes.data;

    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', access_token);
    console.log('üåç –î–æ–º–µ–Ω –ø–æ—Ä—Ç–∞–ª–∞:', domain);

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
    const eventRes = await axios.post(`https://${domain}/rest/event.bind`, null, {
      params: {
        event: 'OnImOpenLineMessageAdd',
        handler: 'https://hikkebana.onrender.com/hook', // üëà —Å—é–¥–∞ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π Render-URL
        auth: access_token
      }
    });

    console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞:', eventRes.data);

    res.send('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ –ø–æ–¥–ø–∏—Å–∞–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:', error.response?.data || error.message);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  }
});

// –•—É–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/hook', (req, res) => {
  console.log('üì® –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∏–Ω–∏–∏:');
  console.dir(req.body, { depth: null });
  res.send('ok');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
